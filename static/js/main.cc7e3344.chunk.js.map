{"version":3,"sources":["actions/index.js","pages/Login.js","Components/Header.js","Components/Form.js","Components/Expenses.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["userAction","email","type","payload","Login","state","password","isButtonLoginDisabled","saveEmailInState","props","history","saveEmail","push","this","match","length","setState","target","id","value","enabledButton","localStorage","setItem","src","alt","className","data-testid","placeholder","onChange","e","handleChanges","disabled","onClick","React","Component","connect","dispatch","Header","userEmail","expenses","sumExpenses","forEach","expense","getCurrency","currency","getAsk","exchangeRates","ask","toFixed","user","wallet","Form","description","method","tag","saveNewExpense","bind","fetchAllApi","a","fetch","response","json","data","arrayCurrency","Object","keys","removeUSDT","filter","currencies","dispatchCurrencies","dispatchExpense","allApi","console","log","htmlFor","map","moeda","index","key","Expenses","Number","name","split","Wallet","App","exact","path","component","Boolean","window","location","hostname","initialStateUser","userReducer","action","initialStateWallet","walletReducer","newExpense","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc7e3344.chunk.js","sourcesContent":["// Coloque aqui suas actions\n\nexport const USER_ACTION = 'USER_ACTION';\nexport const NEW_EXPENSE = 'NEW_EXPENSE';\nexport const CURRENCIES = 'CURRENCIES';\n\nconst userAction = (email) => ({\n  type: 'USER_ACTION',\n  payload: email,\n});\n\nexport function newExpense(param) {\n  return {\n    type: NEW_EXPENSE,\n    payload: param,\n  };\n}\n\nexport function walletCurriencies(param) {\n  return {\n    type: CURRENCIES,\n    payload: param,\n  };\n}\n\nexport default userAction;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport userAction from '../actions';\n// import '../Css/LoginStyle.css';\nimport '../Css/LoginStyle.css';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    isButtonLoginDisabled: true,\n  };\n\n  saveEmailInState = () => {\n    const { email } = this.state;\n    const { history, saveEmail } = this.props;\n    saveEmail(email);\n    history.push('/carteira');\n  }\n\n  enabledButton() {\n    const { email, password } = this.state;\n    // Regex para verificação do email => https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript\n    const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n    // Método .match() => https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/match\n    const validEmail = email.match(emailRegex);\n    const minLengthPassword = 6;\n\n    if (validEmail && password.length >= minLengthPassword) {\n      this.setState({ isButtonLoginDisabled: false });\n    } else {\n      this.setState({ isButtonLoginDisabled: true });\n    }\n  }\n\n  handleChanges({ target }) {\n    const { id, value } = target;\n    this.setState({ [id]: value }, this.enabledButton);\n    if (id === 'email') {\n      localStorage.setItem('email', value);\n    }\n  }\n\n  render() {\n    const { isButtonLoginDisabled } = this.state;\n    return (\n      <section>\n        <div id=\"title\">\n          <h2>TrybeWallet</h2>\n          <img src=\"https://img.icons8.com/bubbles/50/000000/money.png\" alt=\"ícone dinheiro\" />\n          {' '}\n\n        </div>\n        <form className=\"formLogin\">\n          <input\n            type=\"email\"\n            data-testid=\"email-input\"\n            id=\"email\"\n            placeholder=\"Digite seu email\"\n            onChange={ (e) => this.handleChanges(e) }\n          />\n          <input\n            type=\"password\"\n            data-testid=\"password-input\"\n            id=\"password\"\n            placeholder=\"Senha\"\n            onChange={ (e) => this.handleChanges(e) }\n          />\n          <button\n            type=\"button\"\n            disabled={ isButtonLoginDisabled }\n            onClick={ this.saveEmailInState }\n          >\n            Entrar\n          </button>\n\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveEmail: (email) => dispatch(userAction(email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape().isRequired,\n  saveEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n\n// Consultei os GitHub a seguir para enterder como fazer o mapDispatchToProps pelo onClick do botão;\n// https://github.com/tryber/sd-018-a-project-trybewallet/pull/94\n// https://github.com/tryber/sd-018-a-project-trybewallet/pull/87\n","import React from 'react';\nimport PropTypes, { objectOf } from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../Css/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { userEmail, expenses } = this.props;\n\n    let sumExpenses = 0;\n    if (expenses.length > 0) {\n      expenses.forEach((expense) => {\n        const getCurrency = expense.currency;\n        const getAsk = expense.exchangeRates[getCurrency].ask;\n        sumExpenses += expense.value * getAsk;\n      });\n    }\n    return (\n      <header>\n        <div id=\"divOne\">\n          <img src=\"https://img.icons8.com/bubbles/50/000000/money.png\" alt=\"ícone dinheiro\" />\n          <p data-testid=\"email-field\">\n            Email:\n            {' '}\n            { userEmail }\n          </p>\n        </div>\n        <div id=\"divTwo\">\n          <p data-testid=\"total-field\" id=\"totalField\">\n            Despesa Total: R$\n            {' '}\n            {sumExpenses.toFixed(2)}\n\n          </p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(objectOf).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { string } from 'prop-types';\nimport { newExpense, walletCurriencies } from '../actions/index';\nimport '../Css/Form.css';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: '',\n    };\n    this.saveNewExpense = this.saveNewExpense.bind(this);\n    this.fetchAllApi = this.fetchAllApi.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(url);\n    const data = await response.json();\n    // console.log(data);\n    // console.log('retorno Api====', Object.keys(data));\n    const arrayCurrency = Object.keys(data);\n    const removeUSDT = arrayCurrency.filter((currencies) => (currencies !== 'USDT'));\n\n    const { dispatchCurrencies } = this.props;\n    dispatchCurrencies(removeUSDT);\n  }\n\n  async fetchAllApi() {\n    const url = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(url);\n    const data = await response.json();\n    // const removeUSDT = data.Object.keys(data).filter((valor) => valor !== 'USDT');\n    // console.log('removeUDT ===> ', removeUSDT);\n\n    this.setState({ exchangeRates: data });\n    return data;\n  }\n\n  async saveNewExpense() {\n    const { dispatchExpense } = this.props;\n    const allApi = await this.fetchAllApi();\n    // console.log('cliquei');\n    // console.log('resultado da api =>', allApi);\n    this.setState({ exchangeRates: allApi });\n    dispatchExpense(this.state);\n    // document.getElementById('value').value = '';\n    this.setState({ value: '', currency: 'USD' });\n  }\n\n  handleChanges({ target }) {\n    const { id, value } = target;\n    console.log(id, value);\n    this.setState({ [id]: value });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value } = this.state;\n\n    return (\n      <form className=\"form\">\n        <label htmlFor=\"value\">\n          Valor:\n          {' '}\n          <input\n            value={ value }\n            id=\"value\"\n            type=\"number\"\n            placeholder=\"Digite o valor\"\n            data-testid=\"value-input\"\n            onChange={ (e) => this.handleChanges(e) }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          {' '}\n          Moeda:\n          {' '}\n          <select\n            id=\"currency\"\n            data-testid=\"currency-input\"\n            onChange={ (e) => this.handleChanges(e) }\n          >\n            {\n              currencies.map((moeda, index) => (\n                <option\n                  key={ index }\n                  value={ moeda }\n                  data-testid={ moeda }\n                >\n                  {moeda}\n\n                </option>))\n            }\n\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          {' '}\n          Método de pagamento:\n          {' '}\n          <select\n            id=\"method\"\n            data-testid=\"method-input\"\n            onChange={ (e) => this.handleChanges(e) }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          {' '}\n          Categoria:\n          {' '}\n          <select\n            id=\"tag\"\n            data-testid=\"tag-input\"\n            onChange={ (e) => this.handleChanges(e) }\n\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <label htmlFor=\"description\">\n          {' '}\n          Descrição:\n          {' '}\n          <input\n            type=\"text\"\n            id=\"description\"\n            data-testid=\"description-input\"\n            onChange={ (e) => this.handleChanges(e) }\n          />\n        </label>\n        {' '}\n        <button\n          id=\"btnSubmit\"\n          type=\"button\"\n          placeholder=\"Adicionar despesa\"\n          onClick={ this.saveNewExpense }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  dispatchExpense: PropTypes.func.isRequired,\n  dispatchCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({ currencies: state.wallet.currencies });\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchExpense: (payload) => dispatch(newExpense(payload)),\n  dispatchCurrencies: (payload) => dispatch(walletCurriencies(payload)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { objectOf, string } from 'prop-types';\nimport '../Css/Expenses.css';\n\nclass Expenses extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div id=\"container\">\n\n        <table>\n          <thead>\n\n            <caption>Despesas</caption>\n\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map((expense) => (\n              <tr key={ expense.id }>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{Number(expense.value).toFixed(2)}</td>\n                <td>{expense.exchangeRates[expense.currency].name.split('/')[0]}</td>\n                <td>{Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}</td>\n                <td>\n                  { Number(expense.value * expense.exchangeRates[expense.currency]\n                    .ask).toFixed(2)}\n                </td>\n                <td>Real</td>\n                <td>Edita/Excluir</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nExpenses.propTypes = {\n  expenses: PropTypes.arrayOf(objectOf(string)).isRequired,\n};\n\nconst mapStateToProps = (state) => ({ expenses: state.wallet.expenses });\n\nexport default connect(mapStateToProps)(Expenses);\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport Header from '../Components/Header';\nimport Form from '../Components/Form';\nimport Expenses from '../Components/Expenses';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Form />\n        <Expenses />\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n};\n\nconst mapStateToProps = (state) => ({ userEmail: state.user.email });\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nconst initialStateUser = {\n  email: '',\n};\n\nconst userReducer = (state = initialStateUser, action) => {\n  switch (action.type) {\n  case 'USER_ACTION':\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { NEW_EXPENSE, CURRENCIES } from '../actions';\n\nconst initialStateWallet = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = initialStateWallet, action) => {\n  let newExpense = null;\n  switch (action.type) {\n  case NEW_EXPENSE:\n    newExpense = { id: state.expenses.length, ...action.payload };\n    return {\n      ...state,\n      expenses: [...state.expenses, newExpense],\n    };\n  case CURRENCIES:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}